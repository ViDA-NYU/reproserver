apiVersion: v1
kind: ConfigMap
metadata:
  name: config
data:
  s3.url: http://minio:9000
  s3.bucket-prefix: prod-
  s3.client-url: http://192.168.99.100:30090
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: web
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: web
    spec:
      serviceAccountName: reproserver-sa
      containers:
      - name: web
        image: reproserver_web
        imagePullPolicy: IfNotPresent
        env:
        - name: SHORTIDS_SALT
          valueFrom:
            secretKeyRef:
              name: reproserver-secret
              key: salt
        - name: S3_KEY
          valueFrom:
            secretKeyRef:
              name: reproserver-secret
              key: s3_key
        - name: S3_SECRET
          valueFrom:
            secretKeyRef:
              name: reproserver-secret
              key: s3_secret
        - name: S3_URL
          valueFrom:
            configMapKeyRef:
              name: config
              key: s3.url
        - name: S3_BUCKET_PREFIX
          valueFrom:
            configMapKeyRef:
              name: config
              key: s3.bucket-prefix
        - name: S3_CLIENT_URL
          valueFrom:
            configMapKeyRef:
              name: config
              key: s3.client-url
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: reproserver-secret
              key: user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: reproserver-secret
              key: password
        - name: POSTGRES_HOST
          value: postgres
        - name: POSTGRES_DB
          value: reproserver
        - name: DOCKER_HOST
          value: tcp://127.0.0.1:2375
        - name: REGISTRY
          value: registry:5000
        - name: ZENODO_TOKEN
          valueFrom:
            secretKeyRef:
              name: reproserver-secret
              key: zenodo_token
        ports:
        - containerPort: 8000
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
      - name: docker
        image: docker:18.09-dind
        securityContext:
          privileged: true
        args:
        - "--storage-driver=overlay2"
        - "--userns-remap=default"
        - "--insecure-registry=registry:5000"
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: registry
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: registry
    spec:
      containers:
      - name: registry
        image: registry:2.6
        ports:
        - containerPort: 5000
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:9.6
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: reproserver-secret
              key: user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: reproserver-secret
              key: password
        ports:
        - containerPort: 5432
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: data
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: registry
  labels:
    app: registry
spec:
  selector:
    app: registry
  ports:
  - protocol: TCP
    port: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
  - protocol: TCP
    port: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: web
  labels:
    app: web
spec:
  selector:
    app: web
  type: NodePort
  ports:
  - protocol: TCP
    port: 8000
    nodePort: 30080
